Configuration:

Public Variables:
  int seed_
  int election_day_length_hours_ 
  int election_day_length_seconds_ 
  int time_to_vote_mean_seconds_ 
  int max_expected_to_simulate_ 
  int min_expected_to_simulate_ 
  int wait_time_minutes_that_is_too_long_ 
  int number_of_iterations_ 
  double arrival_zero_
 
  vector<int> actual_service_times_
  vector<double> arrival_fractions_
 
General Functions:
  int GetMaxServiceSubscript() const
  void ReadConfiguration(Scanner& instream)
  void ReadServiceTimes(Scanner& instream)
  string ToString()
  
  ReadConfiguration() - reads the Configuration file.
  ReadServiceTimes()  - reads the Service-Time file.

  This class does not directly output anything; However, it does have a ToString() member function
  that returns a string of all the primitive variables and the result of the GetMaxServiceSubscript() 
  member function.
  
Creating Configuration Files: (file_name.txt)
  The Configuration class is responsible for configuring the statistical computation needed 
  by this election simulator. Thus, this class is the cast that the 'rest of the program' is 
  poured into. This class fulfills some of the much needed independent variables needed to
  simulate a queue, in this case an election, as specified by traditional Queueing theory. 
  This class requires two input files that are given by the user in the command line arguments and 
  passed into this module via input streams; hence, those two files are the Configuration file 
  and Service-Time file. The Configuration file has the input delimited by spaces; thus, the 
  input should be formatted like this, let ; be the space delimiter:

  Configuration File: 
    FirstLine: 
      RN_SEED;number of hours in election day; mean time to vote; max number of voters per pct; 
      waiting time(minutes);"too long" number of iterations to perform. 
      (All of these numbers should be integers.)

    SecondLine:
      percent at time zero; pct arrival percentages per hour (13 numbers). 
      (All of these numbers should be doubles.)
    
  Service-Time File: 
    The Service-Time file should be formatted like a column, and all the values should be given 
    as integers in sorted ascending order.


Simulation:

Private Variables:
  map<int, OnePct> pcts_;
  
General Functions:
  void ReadPrecincts(Scanner& infile)
  void RunSimulation(const Configuration& config, MyRandom& random, ofstream& out_stream)
  string ToString()
  
  ReadPrecincts() - reads from the Precinct file, creates a precinct, then stores it in 
                    the pcts_ map.
  RunSimulation() - iterates through pcts_, checks to make sure the expected number of
                    voters is with the minimum and maximum expected voters, then proceeds
                    to run simulations.
  
  Once data for the precincts has been read in by the Simulation class
  
