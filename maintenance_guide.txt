***Go back and also list local variables!***
  ***One line description of variables.***

Main.cc .h:

   Main serves as the front end for the program. It handles setting up all the variables involved
   with input and output files, as well as all major function calls required for proper execution.
   Main uses not only the following local variables, but member functions and variables from the 
   included Utilities file. For further information, see the Utilities section.
  
Local Variables:
  string config_filename       - configuration file.txt, defined by argument 1.
  string pct_filename          - precinct file.txt, defined by argument 2.
  string out_filename          - output file.txt, defined by argument 3.
  string log_filename          - log file.txt, defined by argument 4.
  string service_time_filename - service-times file.txt, defined by argument 5.
  string outstring             - used to store output, output to log and output files.
  string timecall_output       - (?)
  
  ofstream out_stream - output stream used to write to out_filename
  
  Scanner config_stream  - scanner used for reading the configuration file.
  Scanner pct_stream     - scanner used for reading the precinct file.
  Scanner service_stream - scanner used for reading the service-times file.
  
  (Does anyone think these descriptions are actually necessary? I know it should be 
   'obvious to a coder' but I can't decide what Buell would say.)
  Configuration config  - the object of Configuration.
  Simulation simulation - the object of Simulation.
  MyRandom random       - the object of MyRandom.



Config.cc .h:

  (Brief, maybe 3 sentence description.)

Public Variables:
  int seed_;
  int election_day_length_hours_; 
  int election_day_length_seconds_; 
  int time_to_vote_mean_seconds_; 
  int max_expected_to_simulate_; 
  int min_expected_to_simulate_; 
  int wait_time_minutes_that_is_too_long_;
  int number_of_iterations_; 
  double arrival_zero_;
 
  vector<int> actual_service_times_;
  vector<double> arrival_fractions_;
 
General Functions:
  int GetMaxServiceSubscript() const;
  void ReadConfiguration(Scanner& instream);
  void ReadServiceTimes(Scanner& instream);
  string ToString();
  
  GetMaxServiceSubscript() - returns the longest service times from the service times vector.
  ReadConfiguration()      - reads the Configuration file.
  ReadServiceTimes()       - reads the Service-Time file.
  ToString()               - outputs a formatted form of the variables including 
                             GetMaxServiceSubscript().
   
Creating Configuration Files: (file_name.txt)
  The Configuration class is responsible for configuring the statistical computation needed 
  by this election simulator. Thus, this class is the cast that the 'rest of the program' is 
  poured into. This class fulfills some of the much needed independent variables needed to
  simulate a queue, in this case an election, as specified by traditional Queueing theory. 
  This class requires two input files that are given by the user in the command line arguments and 
  passed into this module via input streams; hence, those two files are the Configuration file 
  and Service-Time file. The Configuration file has the input delimited by spaces; thus, the 
  input should be formatted like this, let ; be the space delimiter:

  Configuration File: 
    FirstLine: 
      RN_SEED;number of hours in election day; mean time to vote; max number of voters per pct; 
      waiting time(minutes);"too long" number of iterations to perform. 
      (All of these numbers should be integers.)

    SecondLine:
      percent at time zero; pct arrival percentages per hour (13 numbers). 
      (All of these numbers should be doubles.)
    
  Service-Time File: 
    The Service-Time file should be formatted like a column, and all the values should be given 
    as integers in sorted ascending order.


Simulation.cc .h:

Private Variables:
  map<int, OnePct> pcts_;
  
General Functions:
  void ReadPrecincts(Scanner& infile);
  void RunSimulation(const Configuration& config, MyRandom& random, ofstream& out_stream);
  string ToString();
  
  ReadPrecincts() - reads from the Precinct file, creates a precinct, then stores it in 
                    the pcts_ map.
  RunSimulation() - iterates through pcts_, checks to make sure the expected number of
                    voters is with the minimum and maximum expected voters, then proceeds
                    to run simulations.
  ToString()      - outputs precinct data to a string via OnePct()::ToString().
  
  The Simulation class handles the front-end of precinct simulation. To begin, the Simulation class
  reads in individual precint data with the ReadPrecincts() member function. After the precinct data
  is read in, RunSimulation() iterates through pcts_ and runs simulations via OnePct::RunSimulationPct().
  

OnePct.cc .h:

  The OnePct class is where the bulk of the work is done. It uses data input from the Configuration
  file to perform computations involving queue theory.
  (Needs more description. Maybe one sentence?)

Private Variables:
  int    pct_expected_voters_ = kDummyInt;
  int    pct_expected_per_hour_ = kDummyInt;
  double pct_minority_ = kDummyDouble;
  string pct_name_ = kDummyString;
  int    pct_number_ = kDummyInt;
  double pct_turnout_ = kDummyDouble;
  int    pct_stations_ = kDummyInt;
  int    pct_num_voters_ = kDummyInt;
  double wait_dev_seconds_;
  double wait_mean_seconds_;
  set<int> stations_to_histo_;
  vector<int> free_stations_;
  multimap<int, OneVoter> voters_backup_;
  multimap<int, OneVoter> voters_done_voting_;
  multimap<int, OneVoter> voters_pending_;
  multimap<int, OneVoter> voters_voting_;

Accessors:
  int GetExpectedVoters() const - returns the expected voter turnout for a precinct.
  int GetPctNumber() const      - returns the precinct ID.
  
Public Functions:
  void ReadData(Scanner& infile);
  void RunSimulationPct(const Configuration& config, MyRandom& random, ofstream& out_stream);
  string ToString();
  string ToStringVoterMap(string label, multimap<int, OneVoter> themap);
  
  ReadData()         - called by the Simulation class and creates a precinct with data from
                       an input file.
  RunSimulationPct() - sets a min and max station count, runs a simulation, then calls the private
                       member function DoStatistics().
  ToString()         - outputs a string of data involving a precinct.
  ToStringVoterMap() - outputs the map of voters with information for each voter
  
Private Functions:
  void CreateVoters(const Configuration& config, MyRandom& random, ofstream& out_stream)
  int DoStatistics(int iteration, const Configuration& config, int station_count
                   map<int, int>& map_for_histo, ofstream& out_stream);
  void ComputeMeanAndDev();
  void RunSimulationPct2(int stations);
  
  CreateVoters()      - creates voters based on data from a precinct.
  DoStatistics()      - calculates how many voters had to wait too long as well as the mean and
                        deviation of the wait time via ComputeMeanAndDev().
  ComputeMeanAndDev() - calculates the mean wait time and deviation of the mean.
  RunSimulationPct2() - (?)
  

OneVoter.cc .h:

  (Description.)

Parameterized Constructor:
  OneVoter(int sequence, int arrival_seconds, int duration_seconds);
  
Private Variables:
  int sequence_;
  int time_arrival_seconds_;
  int time_done_voting_seconds_;
  int time_start_voting_seconds_;
  int time_vote_duration_seconds_;
  int time_waiting_seconds_;
  int which_station_;
  
Accessors:
  int GetStationNumber() const  - returns the station in use by a voter.
  int GetTimeArrival() const    - returns the arrival time of a voter in seconds.
  int GetTimeDoneVoting() const - returns the sum of the time started and the duration spent 
                                  by a voter.
  int GetTimeWaiting() const    - returns the amount of time a voter has been waiting in seconds.
  int GetTimeInQ() const        - returns the start time minus the arrival times.
  
Public Functions:
  void AssignStation(int station_number, int start_time_seconds);
  void DoneVoting();
  string ToString();
  static string ToStringHeader();
  
  AssignStation()  - called by OneVoter::RunSimulationPct2(), a voter is assigned to 
                     a free station.
  DoneVoting()     - (?)
  ToString()       - outputs data for a single voter.
  ToStringHeader() - creates a header for the ToString() member function.
  
Private Functions:
  string ConvertTime(int time_in_seconds) const;
  string GetTOD(int time) const;

  ConvertTime() - returns time from seconds to hour:minute:second format.
  GetTOD()      - returns the formatted time of day.
